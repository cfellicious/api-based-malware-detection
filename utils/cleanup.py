import json
from collections import ChainMap
from utils.constants import expanded_necessary_keys as keys
from utils.utils import get_data


def clean_data(client, file, prefix='train', num_sub_token='<NUM>', int_limit=10e8):
    data = get_data(client=client, file=file, prefix=prefix)
    cleaned_data = []
    curr_string = ''
    for line in data:
        curr_line = json.loads(line)
        if curr_line.get(keys[0], curr_line.get(keys[2], None)) is None:
            continue
        minimal_dict = {k: curr_line.get(k, None) for k in keys}
        params = minimal_dict.get(keys[1], None)
        for key, item in minimal_dict.items():
            if item is None or key in keys[1]:
                continue
            curr_string = curr_string + ' ' + item
        """
        if params is not None:
            params = json.loads(params)
            params = dict(ChainMap(*params))
            minimal_dict[keys[1]] = params
            for key, value in params.items():
                if isinstance(value, int) and value > int_limit:
                    params[key] = num_sub_token
        """
        # cleaned_data.append(str(minimal_dict))

    return str(curr_string[1:]).replace('\\', '')

